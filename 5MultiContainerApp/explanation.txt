This section focuses on creating a website that'll calculate the fibbinaci ssequence.

The difference between this and the earlier version, is this will contain multiple applications.
Namely a front end javascript page / webserver and a backend database

The technologies used:

1. Nginx - will be used as the front end user interactation
2. React server - serve the front end gui components
3. Express server - For webserver endpoint to serve data e.t.c
4. Redis - Database 1
5. postgres - Database 2


======================================================
I skipped through the majority of the formation of the javascript frontend code but here's the quick run down.

We've got a react application. It has 2 main pages, 1 for the fibinnaci sequence, the other for just a random page to show you can navigate pages.

The react application calls to different endpoints of a node express server.

The server endpoints will add different values to the databases and allow you to get all the output from the different databases.

The 'worker' is activated when things are added to the database. 
Essentially, we'll add a key and a value to the database. The worker will run off with the new key, then calculate the new fibinnaci value for this value. Then replace the value
in the database with the value it just created.

There's 2 databases. The postgres one holds the keys. The redis one holds the key and values.

=======================================================

Section 9 - where the docker work starts.

In 121, we're creating dev dockerfiles.

The docker files are pretty simple; 
they all essentially download the required node packages 
and do npm run start or similar to start the development environment

===========================================
We then created the docker compose file.

This created a few different environments: worker, clinet and server.

This allowed us to run the different docker files, map their volumes and set a bunch 
of evironment variables in order to ensure files were correctly copied over.

---------------

Following this, we also added another environment: nginx.
This was to host the different files and ensure all the endpoints are routed properly

In order to do this, we add a condition to the nginx server that will forward all the
/api requests through to the express server, and all the
/ requests were forwarded to the react server.

side note - we specify the /api instead of the port number as port numbers can change on the route,
having the /api at the beggining, we can just customize them in one place


